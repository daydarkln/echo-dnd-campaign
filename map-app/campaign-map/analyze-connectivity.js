#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
const pointsData = JSON.parse(fs.readFileSync('./src/tochki-interesa.json', 'utf8'));
const pathsData = JSON.parse(fs.readFileSync('./src/puti-mezhdu-lokaciyami.json', 'utf8'));

// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
const allLocations = [];
pointsData.areas.forEach(area => {
  area.pointsOfInterest.forEach(poi => {
    allLocations.push({
      id: poi.id,
      name: poi.name,
      area: area.area
    });
  });
});

console.log(`üìä –í—Å–µ–≥–æ –ª–æ–∫–∞—Ü–∏–π: ${allLocations.length}`);
console.log(`üõ£Ô∏è –í—Å–µ–≥–æ –ø—É—Ç–µ–π: ${pathsData.routes.length}`);

// –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ —Å–≤—è–∑–µ–π
const connections = new Map();
allLocations.forEach(loc => {
  connections.set(loc.id, new Set());
});

// –ó–∞–ø–æ–ª–Ω—è–µ–º –≥—Ä–∞—Ñ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–µ–π
pathsData.routes.forEach(route => {
  if (connections.has(route.from) && connections.has(route.to)) {
    connections.get(route.from).add(route.to);
    connections.get(route.to).add(route.from);
  }
});

// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤—è–∑–Ω–æ—Å—Ç—å
console.log('\nüîç –ê–ù–ê–õ–ò–ó –°–í–Ø–ó–ù–û–°–¢–ò:\n');

const isolatedLocations = [];
const connectedLocations = [];

allLocations.forEach(location => {
  const connectionCount = connections.get(location.id).size;
  if (connectionCount === 0) {
    isolatedLocations.push(location);
  } else {
    connectedLocations.push({
      ...location,
      connections: connectionCount
    });
  }
});

// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
if (isolatedLocations.length > 0) {
  console.log('‚ùå –ò–ó–û–õ–ò–†–û–í–ê–ù–ù–´–ï –õ–û–ö–ê–¶–ò–ò (–±–µ–∑ —Å–≤—è–∑–µ–π):');
  isolatedLocations.forEach(loc => {
    console.log(`   ‚Ä¢ ${loc.name} (${loc.id}) - ${loc.area}`);
  });
} else {
  console.log('‚úÖ –í—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–º–µ—é—Ç —Å–≤—è–∑–∏!');
}

console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–ï–ì–ò–û–ù–ê–ú:');
const regionStats = new Map();

allLocations.forEach(location => {
  if (!regionStats.has(location.area)) {
    regionStats.set(location.area, {
      total: 0,
      connected: 0,
      isolated: 0
    });
  }
  
  const stats = regionStats.get(location.area);
  stats.total++;
  
  const connectionCount = connections.get(location.id).size;
  if (connectionCount === 0) {
    stats.isolated++;
  } else {
    stats.connected++;
  }
});

regionStats.forEach((stats, area) => {
  console.log(`\nüèõÔ∏è ${area}:`);
  console.log(`   –í—Å–µ–≥–æ: ${stats.total}`);
  console.log(`   –°–≤—è–∑–∞–Ω–Ω—ã—Ö: ${stats.connected}`);
  if (stats.isolated > 0) {
    console.log(`   ‚ùå –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${stats.isolated}`);
  } else {
    console.log(`   ‚úÖ –í—Å–µ —Å–≤—è–∑–∞–Ω—ã`);
  }
});

console.log('\nüìà –õ–û–ö–ê–¶–ò–ò –° –ù–ê–ò–ú–ï–ù–¨–®–ò–ú–ò –°–í–Ø–ó–Ø–ú–ò:');
const sortedByConnections = connectedLocations.sort((a, b) => a.connections - b.connections);
const leastConnected = sortedByConnections.slice(0, 10);

leastConnected.forEach(loc => {
  console.log(`   ‚Ä¢ ${loc.name} - ${loc.connections} —Å–≤—è–∑–∏ (${loc.area})`);
});