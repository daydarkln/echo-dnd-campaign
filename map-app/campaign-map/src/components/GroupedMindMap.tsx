import React, { useCallback, useEffect, useMemo, useState } from 'react';
import ReactFlow, {
  Background,
  Controls,
  MiniMap,
  useNodesState,
  useEdgesState,
  Node,
  ReactFlowInstance,
} from 'reactflow';
import 'reactflow/dist/style.css';
import { Card, Typography, Modal, Descriptions, Tag, List, Button, Dropdown, Tooltip } from 'antd';
import LocationNode from './LocationNode';
import GroupNode from './GroupNode';
import PathLegend from './PathLegend';
import { GraphNode, GraphEdge, PointsData, PathsData, PointOfInterest } from '../types';
import { useGroups } from '../hooks/useGroups';
import { getLocationName, getAreaNameByLocationId } from '../utils/locationUtils';
import { useTrackers } from '../hooks/useTrackers';
import { applyCircularRegionLayout } from '../utils/layout';
import ObstacleTag from './ObstacleTag';

const { Title } = Typography;

interface GroupedMindMapProps {
  nodes: GraphNode[];
  edges: GraphEdge[];
  pointsData: PointsData;
  pathsData: PathsData;
  onNodeClick: (location: PointOfInterest, area: string) => void;
  onRegionClick: (areaName: string) => void;
}

const nodeTypes = {
  locationNode: LocationNode,
  group: GroupNode,
};



const GroupedMindMap: React.FC<GroupedMindMapProps> = ({ nodes, edges, pointsData, pathsData, onNodeClick, onRegionClick }) => {
  const [graphNodes, setNodes, onNodesChange] = useNodesState(nodes);
  const [graphEdges, setEdges, onEdgesChange] = useEdgesState(edges);
  const [hoveredNodeId, setHoveredNodeId] = useState<string | null>(null);
  const [blockedNodeIds, setBlockedNodeIds] = useState<Set<string>>(new Set());
  const [selectedRoute, setSelectedRoute] = useState<any>(null);
  const [showRouteModal, setShowRouteModal] = useState(false);
  const { groups } = useGroups();
  const [jumpTarget, setJumpTarget] = useState<string | null>(null);
  const [rfInstance, setRfInstance] = useState<ReactFlowInstance | null>(null);
  const { state: trackers } = useTrackers();
  const cityDesc = [
    '0 ‚Äî –ì–æ—Ä–æ–¥ –¥—ã—à–∏—Ç —Ä–æ–≤–Ω–æ: —Ä—ã–Ω–∫–∏ –≥—É–¥—è—Ç, —Å—Ç—Ä–∞–∂–∞ –≤–∞–ª—å—è–∂–Ω–∞, —Å–ª—É—Ö–∏ –Ω–µ –∑–∞–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.',
    '1 ‚Äî –õ—ë–≥–∫–∞—è –Ω–µ—Ä–≤–æ–∑–Ω–æ—Å—Ç—å: –¥–≤–µ—Ä–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç –ø–æ—Ä–∞–Ω—å—à–µ, —É –∫–æ–ª–æ–¥—Ü–µ–≤ —à—ë–ø–æ—Ç –∫–æ—Ä–æ—á–µ.',
    '2 ‚Äî –¢—Ä–µ–≤–æ–≥–∞ —Ä–∞—Å—Ç—ë—Ç: –≤ —Ç—Ä–∞–∫—Ç–∏—Ä–∞—Ö –≥–æ–≤–æ—Ä—è—Ç –ø–æ–ª–≥–æ–ª–æ—Å–∞, —Å—Ç—Ä–∞–∂–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á–∞—â–µ –∏ –¥–æ–ª—å—à–µ.',
    '3 ‚Äî –ö—Ä–∏–∑–∏—Å –Ω–∞ —É–ª–∏—Ü–∞—Ö: –æ—á–µ—Ä–µ–¥–∏, —Å–ª—ë–∑—ã, –Ω–æ—á–∞–º–∏ —Å–ª—ã—à–Ω–æ –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫–∏ —É —Ö—Ä–∞–º–æ–≤.',
    '4 ‚Äî –ü–æ—Ä–æ–≥ —Å–æ—Ä–≤–∞–Ω: –±—É–Ω—Ç—ã, —Ñ–∞–∫–µ–ª—ã –∏ –ø–æ—Å–ø–µ—à–Ω—ã–µ —Å–±–æ—Ä—ã; –∫–∞—Ä–∞–≤–∞–Ω—ã —É—Ö–æ–¥—è—Ç –Ω–∞ —Ä–∞—Å—Å–≤–µ—Ç–µ.',
  ][trackers.cityPanic];
  const ecoDesc = [
    '0 ‚Äî –õ–µ—Å —Å–ø–æ–∫–æ–µ–Ω: —Ç—Ä–æ–ø—ã —É–∑–Ω–∞–≤–∞–µ–º—ã, –∑–≤–µ—Ä—å –±–µ—Ä–µ–∂—ë—Ç –≤—ã–≤–æ–¥–∫–∏.',
    '1 ‚Äî –î–∏—Å—Å–æ–Ω–∞–Ω—Å: –ø—Ç–∏—Ü—ã –º–µ–Ω—è—é—Ç –ø–µ—Ä–µ–ª—ë—Ç—ã, —Ü–≤–µ—Ç–∫–∏ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –Ω–µ –ø–æ —Å–æ–ª–Ω—Ü—É.',
    '2 ‚Äî –î–µ–≥—Ä–∞–¥–∞—Ü–∏—è: –≥—Ä–∏–±—ã –±–µ—Ä—É—Ç –≤–µ—Ä—Ö, –≤–æ–¥–∞ –Ω–µ—Å—ë—Ç –≥–æ—Ä—å–∫–æ–≤–∞—Ç—ã–π –ø—Ä–∏–≤–∫—É—Å.',
    '3 ‚Äî –†—É–±–µ–∂: –ø—Ä–∏–≤—ã—á–Ω—ã–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã ¬´–ø–ª—ã–≤—É—Ç¬ª, –ª—É–≥–∞ —à–µ–ª–µ—Å—Ç—è—Ç –∫–∞–∫ –º–æ—Ä–µ –±–µ–∑ –≤–µ—Ç—Ä–∞.',
    '4 ‚Äî –ö–æ–ª–ª–∞–ø—Å: —Ñ–∞—É–Ω–∞ –ø—Ä—è—á–µ—Ç—Å—è, –∫–æ—Ä–Ω–∏ –ª–æ–º–∞—é—Ç –∫–∞–º–Ω–∏, —Ä–æ—â–∏ —Å–ª—ã—à–Ω—ã –∫–∞–∫ —Ö–æ—Ä.',
  ][trackers.ecosystem];
  const swarmDesc = [
    '0 ‚Äî –†–æ–π —Ç–∞–∏—Ç—Å—è: —Ä–µ–¥–∫–∏–µ —à–µ–ø–æ—Ç–∫–∏ –≤ –≥–ª—É–±–∏–Ω–µ, —Å–ª–µ–¥—ã –Ω–µ —Å–≤–æ–¥—è—Ç—Å—è –≤ —É–∑–æ—Ä.',
    '1 ‚Äî –†–∞–∑–≤–µ–¥–∫–∞: –æ–¥–∏–Ω–æ—á–Ω—ã–µ —â—É–ø–∞–ª—å—Ü–∞ —Å–ø–æ—Ä, –∫–∞—Ä—Ç—ã ¬´–∑–≤–µ–Ω—è—Ç¬ª –≤ –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ —Ç–æ—á–∫–∞—Ö.',
    '2 ‚Äî –°–±–æ—Ä —Å–∏–ª: —Ç—Ä–æ–ø—ã –æ–±—Ä–∞—Å—Ç–∞—é—Ç —Å–ø–æ—Ä—ã–Ω—å–µ–π, –æ—Ö–æ—Ç–Ω–∏–∫–∏ —Å–ª—ã—à–∞—Ç —É–Ω–∏—Å–æ–Ω–Ω—ã–π —Ç–∞–∫—Ç.',
    '3 ‚Äî –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è: –∫–æ–ª–æ–Ω–Ω—ã –≤ –Ω–µ–¥—Ä–∞—Ö, —ç—Ö–æ —à–∞–≥–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø—É–ª—å—Å–æ–º.',
    '4 ‚Äî –ù–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ: —Ç—å–º–∞ –¥–≤–∏–∂–µ—Ç—Å—è –º–∞—Å—Å–æ–π, –ª—é–±–æ–π —à—É–º –æ—Ç–∑—ã–≤–∞–µ—Ç—Å—è –º–Ω–æ–≥–æ–≥–æ–ª–æ—Å–∏–µ–º.',
  ][trackers.swarm];

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä—É–≥–æ–≤—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (–≥—Ä—É–ø–ø—ã-—Ä–µ–≥–∏–æ–Ω—ã)
  useEffect(() => {
    const laidOut = applyCircularRegionLayout(nodes, {
      radius: 1300,
      centerX: 1400,
      centerY: 1100,
      startAngleRad: -Math.PI / 2,
      clockwise: true,
      spacingFactor: 1.1,
    });
    setNodes(laidOut);
  }, [nodes, setNodes]);

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ö–æ–≤–µ—Ä–∞ –æ—Ç —É–∑–ª–æ–≤
  useEffect(() => {
    const handler = (e: any) => {
      const id = e.detail?.id ?? null;
      setHoveredNodeId(id);
    };
    window.addEventListener('location-node-hover', handler as EventListener);
    return () => window.removeEventListener('location-node-hover', handler as EventListener);
  }, []);

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–ª–∏–∫–æ–≤
  useEffect(() => {
    const handler = (e: any) => {
      const { nodeId, duration } = e.detail || {};
      if (nodeId) {
        setBlockedNodeIds(prev => new Set(prev).add(nodeId));
        setTimeout(() => {
          setBlockedNodeIds(prev => {
            const newSet = new Set(prev);
            newSet.delete(nodeId);
            return newSet;
          });
        }, duration || 200);
      }
    };
    window.addEventListener('prevent-node-click', handler as EventListener);
    return () => window.removeEventListener('prevent-node-click', handler as EventListener);
  }, []);

  const handleNodeClick = useCallback(
    (event: React.MouseEvent, node: Node) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∫–ª–∏–∫ –ø–æ —ç—Ç–æ–º—É —É–∑–ª—É
      if (node.type === 'locationNode' && blockedNodeIds.has(node.id)) {
        return; // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫
      }
      
      if (node.type === 'locationNode') {
        const locationData = node.data as any;
        if (locationData.location && locationData.area) {
          onNodeClick(locationData.location, locationData.area);
        }
      }
      if (node.type === 'group' && onRegionClick) onRegionClick(node.data.area);
    },
    [onNodeClick, onRegionClick, blockedNodeIds]
  );

  const handleEdgeClick = useCallback(
    (event: React.MouseEvent, edge: any) => {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–±—Ä–∞
      const route = edge.data?.route;
      if (route) {
        setSelectedRoute(route);
        setShowRouteModal(true);
      }
    },
    []
  );

  const minimapNodeColor = useCallback((node: Node) => {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ –∏–º–µ–Ω–∏ –æ–±–ª–∞—Å—Ç–∏
    const areaIndex = pointsData.areas.findIndex(area => 
      area.area === node.data.area
    );
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É, —á—Ç–æ –∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–æ–≤
    const regionColors = [
      'rgba(255, 105, 135, 1)', // –†–æ–∑–æ–≤—ã–π
      'rgba(50, 205, 50, 1)',   // –ó–µ–ª—ë–Ω—ã–π
      'rgba(30, 144, 255, 1)',  // –°–∏–Ω–∏–π
      'rgba(255, 140, 0, 1)',   // –û—Ä–∞–Ω–∂–µ–≤—ã–π
      'rgba(186, 85, 211, 1)',  // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
      'rgba(255, 215, 0, 1)',   // –ñ—ë–ª—Ç—ã–π
    ];
    
    return regionColors[areaIndex % regionColors.length] || '#1890ff';
  }, [pointsData]);

  // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–≤—è–∑–µ–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏: –∑–∞—Ç–µ–º–Ω—è–µ–º –≤—Å–µ –Ω–µ—Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞–≤–µ–¥—ë–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–µ–π
  useEffect(() => {
    if (!hoveredNodeId) {
      setNodes((nds) => nds.map((n) => ({ ...n, style: { ...(n.style || {}), opacity: 1, filter: undefined } })));
      setEdges((eds) => eds.map((e) => ({
        ...e,
        style: { ...(e.style || {}), opacity: 1, display: 'block' },
        label: (e.data as any)?.route?.travelTime ?? e.label,
      })));
      return;
    }

    const connected = new Set<string>([hoveredNodeId]);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä—ë–±—Ä–∞ –∏–∑ –ø—Ä–æ–ø—Å–æ–≤, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç—å —Ü–∏–∫–ª –æ—Ç —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
    edges.forEach((e) => {
      if (e.source === hoveredNodeId) connected.add(e.target);
      if (e.target === hoveredNodeId) connected.add(e.source);
    });

    setNodes((nds) => nds.map((n) => {
      const isLocation = n.type === 'locationNode';
      const keep = connected.has(n.id);
      const dim = isLocation && !keep;
      return { ...n, style: { ...(n.style || {}), opacity: dim ? 0.25 : 1, filter: dim ? 'grayscale(40%)' : undefined } };
    }));

    setEdges((eds) => eds.map((e) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–æ –ª–∏ —Ä–µ–±—Ä–æ —Å –Ω–∞–≤–µ–¥—ë–Ω–Ω—ã–º —É–∑–ª–æ–º
      const isConnected = (e.source === hoveredNodeId || e.target === hoveredNodeId);
      return {
        ...e,
        style: { 
          ...(e.style || {}), 
          opacity: isConnected ? 1 : 0,
          strokeDasharray: isConnected ? (e.style?.strokeDasharray || 'none') : 'none',
          // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –¥–ª—è –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Ä—ë–±–µ—Ä
          display: isConnected ? 'block' : 'none'
        },
        label: isConnected ? ((e.data as any)?.route?.travelTime ?? e.label) : undefined,
      };
    }));
  }, [hoveredNodeId]);



  return (
    <Card style={{ height: '100%', border: 'none' }}>
      <div style={{ marginBottom: 16, textAlign: 'center' }}>
        <Title level={2} style={{ margin: 0, color: '#1890ff' }}>
          üó∫Ô∏è –ö–∞—Ä—Ç–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∫–∞–º–ø–∞–Ω–∏–∏
        </Title>
        <Typography.Text type="secondary" style={{ fontSize: 16 }}>
          –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–∫–∞—Ü–∏–π
        </Typography.Text>
      </div>
      
      <div style={{ height: 'calc(100vh - 160px)', border: '1px solid #d9d9d9', borderRadius: 8, position: 'relative' }}>
        {/* –ö–Ω–æ–ø–∫–∞ –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤ */}
        <Dropdown
          trigger={['click']}
          menu={{
            items: groups
              .filter(g => g.isPlayers && g.currentLocation)
              .map(g => {
                const locId = g.currentLocation as string;
                return {
                  key: `grp:${g.id}::loc:${locId}`,
                  label: (
                    <div style={{ lineHeight: 1.2 }}>
                      <div style={{ fontWeight: 600 }}>
                        {g.name} <Tag color="blue">{g.members.length}</Tag>
                      </div>
                      <div style={{ fontSize: 12, color: '#666' }}>
                        {getLocationName(locId)} ({getAreaNameByLocationId(locId)})
                      </div>
                    </div>
                  )
                };
              }),
            onClick: ({ key }) => {
              // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –∫–ª—é—á–∞ –≤–∏–¥–∞ "grp:<gid>::loc:<locId>"
              const parts = String(key).split('::loc:');
              const locId = parts.length === 2 ? parts[1] : String(key);
              setJumpTarget(locId);
              // –ù–∞—Ö–æ–¥–∏–º —É–∑–µ–ª —á–µ—Ä–µ–∑ –∏–Ω—Å—Ç–∞–Ω—Å RF (—Å —É—á—ë—Ç–æ–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏/—Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π)
              const targetNode = rfInstance?.getNode(locId);
              if (targetNode) {
                // –°–æ–±—ã—Ç–∏–µ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–ª–∏–∫–∞ –∏ –º—è–≥–∫–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
                window.dispatchEvent(new CustomEvent('prevent-node-click', { detail: { nodeId: locId, duration: 300 } }));
                setNodes(nds => nds.map(n => n.id === locId ? ({ ...n, style: { ...(n.style||{}), boxShadow: '0 0 0 3px #1890ff' } }) : n));
                // –¢–æ—á–Ω—ã–π —Ñ–æ–∫—É—Å: fitView –ø–æ –æ–¥–Ω–æ–º—É —É–∑–ª—É
                try {
                  rfInstance?.fitView({ nodes: [targetNode], duration: 800, padding: 0.2, minZoom: 0.4, maxZoom: 1.4 });
                } catch {}
                setTimeout(() => setNodes(nds => nds.map(n => n.id === locId ? ({ ...n, style: { ...(n.style||{}), boxShadow: undefined } }) : n)), 1200);
              }
            }
          }}
        >
          <Button type="primary" size="middle" style={{ position: 'absolute', zIndex: 5, top: 12, left: 12 }}>
            –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤
          </Button>
        </Dropdown>
        {/* –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä—ã */}
        <Card
          size="small"
          style={{ position: 'absolute', zIndex: 5, top: 56, right: 12, minWidth: 220, boxShadow: '0 2px 8px rgba(0,0,0,0.15)' }}
          bodyStyle={{ padding: 8 }}
          title={<span style={{ fontSize: 12, color: '#555' }}>–û–±—â–∏–µ —Ç—Ä–µ–∫–µ—Ä—ã</span>}
        >
          <div style={{ display: 'grid', gridTemplateColumns: '1fr auto', gap: 6, alignItems: 'center', fontSize: 12 }}>
            <span>–ì–æ—Ä–æ–¥—Å–∫–∞—è –ø–∞–Ω–∏–∫–∞</span>
            <Tooltip title={cityDesc} placement="left">
              <Tag color="blue" style={{ margin: 0, cursor: 'help' }}>{trackers.cityPanic}</Tag>
            </Tooltip>
            <span>–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞</span>
            <Tooltip title={ecoDesc} placement="left">
              <Tag color="green" style={{ margin: 0, cursor: 'help' }}>{trackers.ecosystem}</Tag>
            </Tooltip>
            <span>–†–æ–π</span>
            <Tooltip title={swarmDesc} placement="left">
              <Tag color="red" style={{ margin: 0, cursor: 'help' }}>{trackers.swarm}</Tag>
            </Tooltip>
          </div>
        </Card>
        <ReactFlow
          onInit={(instance) => setRfInstance(instance)}
          nodes={graphNodes}
          edges={graphEdges}
          onNodesChange={onNodesChange}
          onEdgesChange={onEdgesChange}
          onNodeClick={handleNodeClick}
          onEdgeClick={handleEdgeClick}
          nodeTypes={nodeTypes}
          minZoom={0.25}
          fitView
          attributionPosition="bottom-left"
          panOnDrag={true}
          zoomOnScroll={true}
          zoomOnPinch={true}
          zoomOnDoubleClick={false}
        >
          <Background color="#f8f9fa" gap={20} />
          <Controls />
          {/* –ú–∏–Ω–∏–∫–∞—Ä—Ç—É —É–±–∏—Ä–∞–µ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É */}
        </ReactFlow>
        
        <PathLegend pathTypes={pathsData.pathTypes} />
      </div>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—É—Ç–∏ */}
      <Modal
        title="üõ£Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ"
        open={showRouteModal}
        onCancel={() => setShowRouteModal(false)}
        footer={null}
        width={600}
      >
        {selectedRoute && (
          <div>
            <Descriptions
              title={selectedRoute.description}
              bordered
              column={1}
              size="small"
            >
              <Descriptions.Item label="–¢–∏–ø –ø—É—Ç–∏">
                <Tag color="blue">{selectedRoute.pathType}</Tag>
              </Descriptions.Item>
              <Descriptions.Item label="–í—Ä–µ–º—è –≤ –ø—É—Ç–∏">
                {selectedRoute.travelTime}
              </Descriptions.Item>
              {selectedRoute.obstacles && selectedRoute.obstacles.length > 0 && (
                <Descriptions.Item label="–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è">
                  <List
                    size="small"
                    dataSource={selectedRoute.obstacles}
                    renderItem={(obstacle: string) => (
                      <List.Item style={{ padding: '4px 0' }}>
                        <ObstacleTag obstacleName={obstacle} />
                      </List.Item>
                    )}
                  />
                </Descriptions.Item>
              )}
              {selectedRoute.requirements && selectedRoute.requirements.length > 0 && (
                <Descriptions.Item label="–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è">
                  <List
                    size="small"
                    dataSource={selectedRoute.requirements}
                    renderItem={(requirement: string) => (
                      <List.Item style={{ padding: '4px 0' }}>
                        <Tag color="red">{requirement}</Tag>
                      </List.Item>
                    )}
                  />
                </Descriptions.Item>
              )}
              {selectedRoute.notes && (
                <Descriptions.Item label="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è">
                  {selectedRoute.notes}
                </Descriptions.Item>
              )}
            </Descriptions>
          </div>
        )}
      </Modal>
    </Card>
  );
};

export default GroupedMindMap;